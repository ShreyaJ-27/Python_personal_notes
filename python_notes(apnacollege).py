# -*- coding: utf-8 -*-
"""PYTHON NOTES(apnacollege)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17rsDWFf_3E8rqh1-RYIO3M9AJOxLwXzB
"""

#LECTURE1

print("hello world")

print("Pawsome")

name= "Shreya"
age=19
price=25.99
print(name)
print(age)
print(price)
print(name,age,price)
print(type(name))
print(type(age))
print(type(price))

#input 2 numbers amd print their sum
a=float(input("enter a value:"))
b=float(input("enter b value:"))
print("Sum of entered value:",a+b)
print(type(a+b))
print(type(a))
print(type(b))

#Area of square by inputing value of side from user
s=int(input("enter value of side of square:"))
Area=s*s #s**2
print("Area of square:",Area)

#input 2 floating no.& print their average
a=float(input("Enter first value:"))
b=float(input("Enter second value:"))
Avg=(a+b)/2
print("Average of entered values:", Avg)

#input 2 numbers and print true false based on relational operator
a=int(input("Enter first value:"))
b=int(input("Enter second value:"))
print("a>=b",a>=b)

#LECTURE 2

#input user's first name and print its length
name=input("Enter your first name")
print("Length of your first name:",len(name))

#find occurrence of $ in a string
val=input("Enter a string:")
print(val.count("$"))

#To check if a number entered be user is odd or even
n=int(input("Enter a number:"))
if(n%2==0):
  print("Entered number is even.")
else:
  print("Entered number is odd.")

#greatest of 3 numbers entered
n1=int(input("Enter n1 value:"))
n2=int(input("Enter n2 value:"))
n3=int(input("Enter n3 value:"))
if(n1>n2 and n1>n3):
  print(n1,"is greatest number.")
elif(n2>n1 and n2>n3):
  print(n2,"is greatest number.")
else:
  print(n3,"is greatest number.")

#check multiple of 7
n=int(input("Enter a number:"))
if(n%7==0):
  print(n,"is multiple of 7.")
else:
  print(n,"is not multiple of 7.")

#LECTURE 3

#ask user to enter their 3 favorite movies& store them in a list
'''a=input("Enter your 1st favorite movie:")
b=input("Enter your 2nd favorite movie:")
c=input("Enter your 3rd favorite movie:")
list_movies=[a,b,c]
print("Favorite movies:",list_movies)'''


#you can use append method too
movies=[]
mov1=input("Enter your 1st favorite movie:")
mov2=input("Enter your 2nd favorite movie:")
mov3=input("Enter your 3rd favorite movie:")
movies.append(mov1)
movies.append(mov2)
movies.append(mov3)
print("Favorite movies:",movies)

'''UNDONE PROGRAM!!!!!!'''


#check if a list contains palindrome of elements
'''FIXED PROGRAM!!!!!!'''

# Check if a list contains palindrome of elements
l1 = [1, 2, 3, 2, 1]
l3 = l1.copy()         # Make a copy to keep l1 unchanged
l3.reverse()           # Reverse the copy in-place
l2 = l3                # Now l2 is the reversed list

if l1 == l2:
    print("List contains palindrome of elements.")
else:
    print("List does NOT contain palindrome of elements.")

#To count number of students with grade "A"

list_grade=["C","D","A","A","B","B","A"]
print(list_grade.count("A"))

#To sort above list from "A" to "D"
list_grade.sort()
print(list_grade)



#LECTURE 4

#Store word meanings in a python dictionary
info={
    "table" : ("a piece of furniture","lists of facts and figures"),
    "cat" : "a small animal"
}
lis=list(info["table"])
print(type(lis))

print(info)

#number of classrooms required for given list of subjects
subjects={"python","java","C++","python","javascript",
          "java","python","java","C++","C"}

print("Number of classrooms required for given list of subjects:",len(subjects))

#To store subjects and marks entered by user in a dictionary as key-value pair
student_dict={}
m1=int(input("Enter marks obtained in SUB1:"))
student_dict.update({"SUB1":m1})
m2=int(input("Enter marks obtained in SUB2:"))
student_dict.update({"SUB2":m2})
m3=int(input("Enter marks obtained in SUB3:"))
student_dict.update({"SUB3":m3})

print(student_dict)

#To store 9&9.0 as separate values in the set
#1. by storing one of them as a string value in set
values={9,"9.0"}
print(values,"<--by storing one of them as a string.")
#2. by storing them as a tupple in set
values={("float",9.0),("int",9)}
print(values,"<--by storing in tupple.")

#LECTURE 5

#Print numbers from 1 to 100
i=1
while i<=100:
  print(i)
  i+=1

#Print numbers from 100 to 1
j=100
while j>=1:
  print(j)
  j-=1

#multiplication table of a number n using while loop
n=int(input("Enter a number:"))
i=1
while i<=10:
  print(n*i)
  i+=1

#print the elements of following list using while loop:
#[1,4,9,16,25,36,49,64,81,100]
ele=[]
i=1
while i<=10:
  n=i*i
  ele.append(n)
  i+=1
idx=0
while idx<len(ele):
  print(ele[idx])
  idx+=1

print(ele)

#Search for a number x in this tuple using loop:
'''LINEAR SEARCH'''
#(1,4,9,16,25,36,49,64,81,100)

ele=[] # Changed to a list to use append
i=1
while i<=10:
  n=i*i
  ele.append(n)
  i+=1

# Convert list to tuple
ele = tuple(ele)

x=int(input("Enter a number:"))
idx=0
found = False # Flag to indicate if the number is found
while idx<len(ele):
  if ele[idx]==x:
    print(x,"belongs to given tuple")
    found = True
    break # Exit the loop once the number is found
  idx+=1

if not found: # Check if the number was not found after the loop
    print(x,"doesnt belong to given tuple")

i=1
while i<=5:
  if(i==3):
    i+=1      #whyy dis??
    continue
  print(i)
  i+=1

#to traverse in data type like string list tupple we use for loop
'''iterator ka kaam krna h...
yani ki humare pass koi variable jiski value ko hum update kr rhe h..
ya koi stoping condition h toh hum while loop use krte h'''
#aisa koi kaam jo hum apne loop ke complete end ke baad krwana chahte h
# usse hum "else" ke andr likhte h
'''break ke baad else wala statement execute nhi hota h'''
#range(10)-->range(stop)
'''range(2,10)-->range(start,stop)
   range(2,10,2)-->range(star,stop,step)

#print elements using for loop
num=[1,4,9,16,25,36,49,64,81,100]
for i in num:
  print(i)
else:
  print(num)
  print("loop ended")

#to print even numbers using for loop and range
for i in range(2,10,2):
  print(i)

#USING FOR & RANGE
#print 1-100
for i in range(1,101):
  print(i)

#print 100-1
for j in range(100,0,-1):#step size can be negative
  print(j)

#print multiplication table of n
n=int(input("Enter a number:"))
# for i in range(n,11*n,n):
# print(i)

for i in range(1,11):
  print(i*n)

#RANDOM
#find sum of first n numbers
n=int(input("Enter a number:"))
s=n*(n+1)
m=int(s/2)
print("sum of first",n,"numbers;",m)

#WHILE LOOP
#find sum of first n numbers
n=int(input("Enter a number:"))
i=1
s=0
while i<=n:
  s=s+i
  i+=1

print("SUM=",s)

n=int(input("Enter a number:"))
s=0
for i in range(1,n+1):
  s=s+i
print("SUM=",s)

#FOR LOOP
#find factorial of first n numbers
n=int(input("Enter a number:"))
s=1
for i in range(1,n+1):
  s=s*i
  i+=1

print("Factorial of",n,"=",s)

#LECTURE 6

#Average of 3 numbers
def num(a,b,c):
  av=(a+b+c)/3
  return (av)

x=int(input("Enter first number:"))
y=int(input("Enter second number:"))
z=int(input("Enter third number:"))

avg=num(x,y,z)
#avg=int(avg)
print("Average of 3 numbers:",avg)

def calc_avg(a,b,c):
  avg=(a+b+c)/3
  return avg
  print(avg)

calc_avg(7,8,9)

#sep and end in print function
print("physicswallah","alakh sir") #sep=" " ; means automatic space after comma
print("alakh sir") #end="\n",means this statement will automatically be printed in next line

#to print both statements in same line
print("physicswallah", end=" ")
print("alakh sir")
#this will print both statements in same line separated by space

#to find factorial of n
def fac_n(n):
  s=1
  if (n==0):
    return 1
  for i in range(1,n+1):
    s=s*i
  return s

print(fac_n(int(input("Enter a number:"))))

#to convert USD to INR
def convert(m):
  inr=m*80
  return inr

print(convert(float(input("Enter USD money value:"))))

#to print length of list usinf function
l1=[1,2,3,4,5,6]
l2=["sdfsdf","aasge","fgsegewr","sfvrt",67]
l3=[54,67,9,"dffgrt","sfbdb",23,78]


def lenth_list(list):
   return len(list)

print(lenth_list(l1))
print(lenth_list(l2))
print(lenth_list(l3))

#to print elements of list using functions
def ele_list(list):
  for i in list:
    print(i,end=" ")

print(ele_list(l1))
print(ele_list(l2))
print(ele_list(l3))

#Input a number in a function and print odd or even
def func_hw(n):
  if(n%2==0):
    print("EVEN")
  else:
    print(n,"ODD")

func_hw(int(input("Enter a number:")))

#recursive function
def show(n):
  if(n==0): #base case{when should recursion stop}
    return #when we write it like this it means we are returning control not value
  print(n)
  show(n-1)
  print("end")

show(3)

#INCOMPLETE!!!!!
def sum(n):
  if (n==0):
    return
  else:
    s=(n-1)+n
    return print(s)

sum(5)

#LECTURE 7

f=open("sample.txt","r")

line1=f.readline()
print(line1)
#an extra space gets printed after line1 since \n is read at the end of line1
f.close()

f=open("sample.txt","w") #{to create a file which doesn't exist}
f.write("I am learning python")
f.close()

import os
os.remove("sample.txt") # to delete a file

#to import a module which is not pre installed
#pip install tensorflow{example}
#or, pip3 install tensorflow

#To create a new file and data:-
f=open("practice.txt","w")
f.write("Hi everyone")
f.write("\nwe are learning file I/O")
f.write("\nusing java")
f.write("\ni like programming in java")
f.close()

with open("practice.txt","r") as f:
  data=f.read()

new_data =data.replace("java","python")
print(new_data)

with open("practice.txt","w") as f:
  f.write(new_data)

with open("practice.txt","r") as f:
  data=f.read()

s=data.find("learning")
if(s!=-1):
  print("exists at",s)
else:
  print("doesnt exists")



#LECTURE 8{OOPS}

class Student: #class
    name="karan"

s1=Student() #object(instance)
print(s1.name)

class Car:
  color="blue"

car1=Car()
print(car1.color)

class Student:
  college_name=input("Enter college name:")#since it is not defined with self it is stored only once in meowmory
  #constructor
  def __init__(self,name,marks):
    self.name=name
    self.marks=marks
    print("adding new student to database..")

  def hello(self):
    print("HELLO", self.name)

s1=Student(input("Enter student name:"),int(input("Enter marks scored by the student:")))
print(s1.name,s1.marks,s1.college_name)

s1.hello()

#obj attr>class attr

class Student:
  def __init__(self,name,m1,m2,m3):
    self.name=name
    self.m1=m1
    self.m2=m2
    self.m3=m3
  def avg_marks(self):
    s=self.m1+self.m2+self.m3
    avg=s/3
    return print(avg)
s1=Student(input("Enter name:"),50,78,67)
s1.avg_marks()

class Account:
  account_num=input("Enter account number=")
  balance_num=float(input("Enter balance before transaction="))

  def __init__(self,credit,debit):
    self.credit=credit
    self.debit=debit

  def balance(self):
    self.balance=(self.balance_num+self.credit-self.debit)
    return self.balance
a1=Account(1000,1200)

print("ACCOUNT NUMBER=",a1.account_num)
print("BALANCE BEFORE TRANSACTION=",a1.balance_num)

print("BALANCE AFTER TRANSACTION=",a1.balance())

#LECTURE 9{OOPS PART2}

#INHERITANCE
class Car:
  @staticmethod
  def start():
    print("car started..")
  @staticmethod
  def stop():
    print("car stopped..")

class ToyotaCar(Car):
  def __init__(self,name):
    self.name=name

car1=ToyotaCar("Fortuner")
print(car1.start())

class Car:
  def __init__(self,type):   #SUPER METHOD{TO ACCESS METHODS OF CLASS INSIDE ANOTHER CLASS}
    self.type=type

  @staticmethod
  def start():
    print("car started..")
  @staticmethod
  def stop():
    print("car stopped..")

class ToyotaCar(Car):
  def __init__(self,name,type):
    self.name=name
    super().__init__(type)
    super().start()

car1=ToyotaCar("Fortuner","electric")
print(car1.type)

class Person:
  name="anonymous"

 # def change_name(self,name):
   # self.__class__.name=name
    #Person.name=name

  @classmethod
  def change_name(cls,name):
    cls.name=name
p1=Person()
p1.change_name("KARAN ARJUN")
print(p1.name)
print(Person.name)

#implicit overloading
print(1+2)
print("APNA"+"college")#concatenate
print([1,2,3,4]+[5,6,7,8])#merge

class Complex:
  def __init__(self,real,img):
    self.real=real
    self.img=img
  def showNum(self):
    print(self.real,"i+",self.img,"j")

  def __add__(self,num2):
    newReal=self.real+num2.real
    newImg=self.img+num2.img
    return Complex(newReal,newImg)

num1=Complex(1,3)
num1.showNum()

num2=Complex(4,6)
num2.showNum()
#num3=num1.add(num2) {function}
num3=num1+num2 #operator overloading
num3.showNum()

class Circle:
  def __init__(self,radius):
    self.radius=radius

  def area(self):
    self.area=3.14*(self.radius)**2
    return print("Area of given circle=",self.area)

  def perimeter(self):
    self.peri=2*3.14*self.radius
    return print("Perimeter of given circle=",self.peri)

c1=Circle(float(input("Enter radius of a circle:")))
c1.area()
c1.perimeter()

class Employee:
  def __init__(self,role ,department,salary):
    self.role=role
    self.department=department
    self.salary=salary

  def showDetails(self):
    print("EMPLOYEE DETAILS:")
    print("Role-->",self.role)
    print("Department-->",self.department)
    print("Salary-->",self.salary)

e1=Employee(input("Enter role of the employee:"),input("Enter department of employee:"),int(input("Enter salary earned by employee:")))
e1.showDetails()

class Employee:
  def __init__(self,role ,department,salary):
    self.role=role
    self.department=department
    self.salary=salary

  def showDetails(self):
    print("EMPLOYEE DETAILS:")
    print("Role-->",self.role)
    print("Department-->",self.department)
    print("Salary-->",self.salary)

class Engineer(Employee):
  def __init__(self,name,age,role,department,salary):
    self.name=name
    self.age=age
    super().__init__(role,department,salary)
    super().showDetails()

eng=Engineer(input("Enter name:"),int(input("Enter age:")),input("Enter role:"),input("Enter department:"),int(input("Enter salary:")))
print("Name-->",eng.name)
print("Age-->",eng.age)
#eng.showDetails()

class Order:
  def __init__(self,item,price):
    self.item=item
    self.price=price

  def __gt__(self,o2):
    return self.price>o2.price

o1=Order(input("Enter name of item:"),float(input("Enter price of item:")))
o2=Order(input("Enter name of item:"),float(input("Enter price of item:")))
print(o1>o2)

#!!!!LECTURE END!!!!